{"/home/travis/build/npmtest/node-npmtest-union/test.js":"/* istanbul instrument in package npmtest_union */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-union/lib.npmtest_union.js":"/* istanbul instrument in package npmtest_union */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_union = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_union = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-union/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-union && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_union */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_union\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_union.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_union.rollup.js'] =\n            local.assetsDict['/assets.npmtest_union.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_union.__dirname + '/lib.npmtest_union.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-union/node_modules/union/lib/index.js":"/*\n * index.js: Top-level plugin exposing HTTP features in flatiron\n *\n * (C) 2011, Charlie Robbins & the Contributors\n * MIT LICENSE\n *\n */\n\nvar union = exports;\n\n//\n// Expose version information\n//\nexports.version = require('../package.json').version;\n\n//\n// Expose core union components\n//\nunion.BufferedStream = require('./buffered-stream');\nunion.HttpStream     = require('./http-stream');\nunion.ResponseStream = require('./response-stream');\nunion.RoutingStream  = require('./routing-stream');\nunion.createServer   = require('./core').createServer;\nunion.errorHandler   = require('./core').errorHandler;\n","/home/travis/build/npmtest/node-npmtest-union/node_modules/union/lib/buffered-stream.js":"/*\n * buffered-stream.js: A simple(r) Stream which is partially buffered into memory.\n *\n * (C) 2010, Mikeal Rogers\n *\n * Adapted for Flatiron\n * (C) 2011, Charlie Robbins & the Contributors\n * MIT LICENSE\n *\n */\n\nvar events = require('events'),\n    fs = require('fs'),\n    stream = require('stream'),\n    util = require('util');\n\n//\n// ### function BufferedStream (limit)\n// #### @limit {number} **Optional** Size of the buffer to limit\n// Constructor function for the BufferedStream object responsible for\n// maintaining a stream interface which can also persist to memory\n// temporarily.\n//\n\nvar BufferedStream = module.exports = function (limit) {\n  events.EventEmitter.call(this);\n\n  if (typeof limit === 'undefined') {\n    limit = Infinity;\n  }\n\n  this.limit = limit;\n  this.size = 0;\n  this.chunks = [];\n  this.writable = true;\n  this.readable = true;\n  this._buffer = true;\n};\n\nutil.inherits(BufferedStream, stream.Stream);\n\nObject.defineProperty(BufferedStream.prototype, 'buffer', {\n  get: function () {\n    return this._buffer;\n  },\n  set: function (value) {\n    if (!value && this.chunks) {\n      var self = this;\n      this.chunks.forEach(function (c) { self.emit('data', c) });\n      if (this.ended) this.emit('end');\n      this.size = 0;\n      delete this.chunks;\n    }\n\n    this._buffer = value;\n  }\n});\n\nBufferedStream.prototype.pipe = function () {\n  var self = this,\n      dest;\n\n  if (self.resume) {\n    self.resume();\n  }\n\n  dest = stream.Stream.prototype.pipe.apply(self, arguments);\n\n  //\n  // just incase you are piping to two streams, do not emit data twice.\n  // note: you can pipe twice, but you need to pipe both streams in the same tick.\n  // (this is normal for streams)\n  //\n  if (this.piped) {\n    return dest;\n  }\n\n  process.nextTick(function () {\n    if (self.chunks) {\n      self.chunks.forEach(function (c) { self.emit('data', c) });\n      self.size = 0;\n      delete self.chunks;\n    }\n\n    if (!self.readable) {\n      if (self.ended) {\n        self.emit('end');\n      }\n      else if (self.closed) {\n        self.emit('close');\n      }\n    }\n  });\n\n  this.piped = true;\n\n  return dest;\n};\n\nBufferedStream.prototype.write = function (chunk) {\n  if (!this.chunks || this.piped) {\n    this.emit('data', chunk);\n    return;\n  }\n\n  this.chunks.push(chunk);\n  this.size += chunk.length;\n  if (this.limit < this.size) {\n    this.pause();\n  }\n};\n\nBufferedStream.prototype.end = function () {\n  this.readable = false;\n  this.ended = true;\n  this.emit('end');\n};\n\nBufferedStream.prototype.destroy = function () {\n  this.readable = false;\n  this.writable = false;\n  delete this.chunks;\n};\n\nBufferedStream.prototype.close = function () {\n  this.readable = false;\n  this.closed = true;\n};\n\nif (!stream.Stream.prototype.pause) {\n  BufferedStream.prototype.pause = function () {\n    this.emit('pause');\n  };\n}\n\nif (!stream.Stream.prototype.resume) {\n  BufferedStream.prototype.resume = function () {\n    this.emit('resume');\n  };\n}\n\n","/home/travis/build/npmtest/node-npmtest-union/node_modules/union/lib/http-stream.js":"/*\n * http-stream.js: Idomatic buffered stream which pipes additional HTTP information.\n *\n * (C) 2011, Charlie Robbins & the Contributors\n * MIT LICENSE\n *\n */\n\nvar url = require('url'),\n    util = require('util'),\n    qs = require('qs'),\n    BufferedStream = require('./buffered-stream');\n\nvar HttpStream = module.exports = function (options) {\n  options = options || {};\n  BufferedStream.call(this, options.limit);\n\n  if (options.buffer === false) {\n    this.buffer = false;\n  }\n\n  this.on('pipe', this.pipeState);\n};\n\nutil.inherits(HttpStream, BufferedStream);\n\n//\n// ### function pipeState (source)\n// #### @source {ServerRequest|HttpStream} Source stream piping to this instance\n// Pipes additional HTTP metadata from the `source` HTTP stream (either concrete or\n// abstract) to this instance. e.g. url, headers, query, etc.\n//\n// Remark: Is there anything else we wish to pipe?\n//\nHttpStream.prototype.pipeState = function (source) {\n  this.headers = source.headers;\n  this.trailers = source.trailers;\n  this.method = source.method;\n\n  if (source.url) {\n    this.url = this.originalUrl = source.url;\n  }\n\n  if (source.query) {\n    this.query = source.query;\n  }\n  else if (source.url) {\n    this.query = ~source.url.indexOf('?')\n      ? qs.parse(url.parse(source.url).query)\n      : {};\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-union/node_modules/union/lib/response-stream.js":"/*\n * response-stream.js: A Stream focused on writing any relevant information to\n * a raw http.ServerResponse object.\n *\n * (C) 2011, Charlie Robbins & the Contributors\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    HttpStream = require('./http-stream');\n\nvar STATUS_CODES = require('http').STATUS_CODES;\n\n//\n// ### function ResponseStream (options)\n//\n//\nvar ResponseStream = module.exports = function (options) {\n  var self = this,\n      key;\n\n  options = options || {};\n  HttpStream.call(this, options);\n\n  this.writeable = true;\n  this.response = options.response;\n\n  if (options.headers) {\n    for (key in options.headers) {\n      this.response.setHeader(key, options.headers[key]);\n    }\n  }\n\n  //\n  // Proxy `statusCode` changes to the actual `response.statusCode`.\n  //\n  Object.defineProperty(this, 'statusCode', {\n    get: function () {\n      return self.response.statusCode;\n    },\n    set: function (value) {\n      self.response.statusCode = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  if (this.response) {\n    this._headers = this.response._headers = this.response._headers || {};\n\n    // Patch to node core\n    this.response._headerNames = this.response._headerNames || {};\n\n    //\n    // Proxy to emit \"header\" event\n    //\n    this._renderHeaders = this.response._renderHeaders;\n    this.response._renderHeaders = function () {\n      if (!self._emittedHeader) {\n        self._emittedHeader = true;\n        self.headerSent = true;\n        self._header = true;\n        self.emit('header');\n      }\n\n      return self._renderHeaders.call(self.response);\n    };\n  }\n};\n\nutil.inherits(ResponseStream, HttpStream);\n\nResponseStream.prototype.writeHead = function (statusCode, statusMessage, headers) {\n  if (typeof statusMessage === 'string') {\n    this.response.statusMessage = statusMessage;\n  } else {\n    this.response.statusMessage = this.response.statusMessage\n      || STATUS_CODES[statusCode] || 'unknown';\n    headers = statusMessage;\n  }\n\n  this.response.statusCode = statusCode;\n\n  if (headers) {\n    var keys = Object.keys(headers);\n    for (var i = 0; i < keys.length; i++) {\n      var k = keys[i];\n      if (k) this.response.setHeader(k, headers[k]);\n    }\n  }\n};\n\n//\n// Create pass-thru for the necessary\n// `http.ServerResponse` methods.\n//\n['setHeader', 'getHeader', 'removeHeader', '_implicitHeader', 'addTrailers'].forEach(function (method) {\n  ResponseStream.prototype[method] = function () {\n    return this.response[method].apply(this.response, arguments);\n  };\n});\n\nResponseStream.prototype.json = function (obj) {\n  if (!this.response.writable) {\n    return;\n  }\n\n  if (typeof obj === 'number') {\n    this.response.statusCode = obj;\n    obj = arguments[1];\n  }\n\n  this.modified = true;\n\n  if (!this.response._header && this.response.getHeader('content-type') !== 'application/json') {\n    this.response.setHeader('content-type', 'application/json');\n  }\n\n  this.end(obj ? JSON.stringify(obj) : '');\n};\n\nResponseStream.prototype.html = function (str) {\n  if (!this.response.writable) {\n    return;\n  }\n\n  if (typeof str === 'number') {\n    this.response.statusCode = str;\n    str = arguments[1];\n  }\n\n  this.modified = true;\n\n  if (!this.response._header && this.response.getHeader('content-type') !== 'text/html') {\n    this.response.setHeader('content-type', 'text/html');\n  }\n\n  this.end(str ? str: '');\n};\n\nResponseStream.prototype.text = function (str) {\n  if (!this.response.writable) {\n    return;\n  }\n\n  if (typeof str === 'number') {\n    this.response.statusCode = str;\n    str = arguments[1];\n  }\n\n  this.modified = true;\n\n  if (!this.response._header && this.response.getHeader('content-type') !== 'text/plain') {\n    this.response.setHeader('content-type', 'text/plain');\n  }\n\n  this.end(str ? str: '');\n};\n\nResponseStream.prototype.end = function (data) {\n  if (data && this.writable) {\n    this.emit('data', data);\n  }\n\n  this.modified = true;\n  this.emit('end');\n};\n\nResponseStream.prototype.pipe = function () {\n  var self = this, \n      dest;\n\n  self.dest = dest = HttpStream.prototype.pipe.apply(self, arguments);\n  \n  dest.on('drain', function() {\n    self.emit('drain')\n  })\n  return dest;\n};\n\nResponseStream.prototype.write = function (data) {\n  this.modified = true;\n\n  if (this.writable) {\n    return this.dest.write(data);\n  }\n};\n\nResponseStream.prototype.redirect = function (path, status) {\n  var url = '';\n\n  if (~path.indexOf('://')) {\n    url = path;\n  } else {\n    url += this.req.connection.encrypted ? 'https://' : 'http://';\n    url += this.req.headers.host;\n    url += (path[0] === '/') ? path : '/' + path;\n  }\n\n  this.res.writeHead(status || 302, { 'Location': url });\n  this.end();\n};\n","/home/travis/build/npmtest/node-npmtest-union/node_modules/union/lib/routing-stream.js":"/*\n * routing-stream.js: A Stream focused on connecting an arbitrary RequestStream and\n * ResponseStream through a given Router.\n *\n * (C) 2011, Charlie Robbins & the Contributors\n * MIT LICENSE\n *\n */\n\nvar util = require('util'),\n    union = require('./index'),\n    RequestStream = require('./request-stream'),\n    ResponseStream = require('./response-stream');\n\n//\n// ### function RoutingStream (options)\n//\n//\nvar RoutingStream = module.exports = function (options) {\n  options = options || {};\n  RequestStream.call(this, options);\n\n  this.before = options.before || [];\n  this.after = options.after || [];\n  this.response = options.response || options.res;\n  this.headers = options.headers || {\n    'x-powered-by': 'union ' + union.version\n  };\n\n  this.target = new ResponseStream({\n    response: this.response,\n    headers: this.headers\n  });\n\n  this.once('pipe', this.route);\n};\n\nutil.inherits(RoutingStream, RequestStream);\n\n//\n// Called when this instance is piped to **by another stream**\n//\nRoutingStream.prototype.route = function (req) {\n  //\n  // When a `RoutingStream` is piped to:\n  //\n  // 1. Setup the pipe-chain between the `after` middleware, the abstract response\n  //    and the concrete response.\n  // 2. Attempt to dispatch to the `before` middleware, which represent things such as\n  //    favicon, static files, application routing.\n  // 3. If no match is found then pipe to the 404Stream\n  //\n  var self = this,\n      after,\n      error,\n      i;\n\n  //\n  // Don't allow `this.target` to be writable on HEAD requests\n  //\n  this.target.writable = req.method !== 'HEAD';\n\n  //\n  // 1. Setup the pipe-chain between the `after` middleware, the abstract response\n  //    and the concrete response.\n  //\n  after = [this.target].concat(this.after, this.response);\n  for (i = 0; i < after.length - 1; i++) {\n    //\n    // attach req and res to all streams\n    //\n    after[i].req     = req;\n    after[i + 1].req = req;\n    after[i].res     = this.response;\n    after[i + 1].res = this.response;\n    after[i].pipe(after[i + 1]);\n\n    //\n    // prevent multiple responses and memory leaks\n    //\n    after[i].on('error', this.onError);\n  }\n\n  //\n  // Helper function for dispatching to the 404 stream.\n  //\n  function notFound() {\n    error = new Error('Not found');\n    error.status = 404;\n    self.onError(error);\n  }\n\n  //\n  // 2. Attempt to dispatch to the `before` middleware, which represent things such as\n  //    favicon, static files, application routing.\n  //\n  (function dispatch(i) {\n    if (self.target.modified) {\n      return;\n    }\n    else if (++i === self.before.length) {\n      //\n      // 3. If no match is found then pipe to the 404Stream\n      //\n      return notFound();\n    }\n\n    self.target.once('next', dispatch.bind(null, i));\n    if (self.before[i].length === 3) {\n      self.before[i](self, self.target, function (err) {\n        if (err) {\n          self.onError(err);\n        } else {\n          self.target.emit('next');\n        }\n      });\n    }\n    else {\n      self.before[i](self, self.target);\n    }\n  })(-1);\n};\n\nRoutingStream.prototype.onError = function (err) {\n  this.emit('error', err);\n};\n","/home/travis/build/npmtest/node-npmtest-union/node_modules/union/lib/request-stream.js":"/*\n * http-stream.js: Idomatic buffered stream which pipes additional HTTP information.\n *\n * (C) 2011, Charlie Robbins & the Contributors\n * MIT LICENSE\n *\n */\n\nvar url = require('url'),\n    util = require('util'),\n    qs = require('qs'),\n    HttpStream = require('./http-stream');\n\nvar RequestStream = module.exports = function (options) {\n  options = options || {};\n  HttpStream.call(this, options);\n\n  this.on('pipe', this.pipeRequest);\n  this.request = options.request;\n};\n\nutil.inherits(RequestStream, HttpStream);\n\n//\n// ### function pipeRequest (source)\n// #### @source {ServerRequest|HttpStream} Source stream piping to this instance\n// Pipes additional HTTP request metadata from the `source` HTTP stream (either concrete or\n// abstract) to this instance. e.g. url, headers, query, etc.\n//\n// Remark: Is there anything else we wish to pipe?\n//\nRequestStream.prototype.pipeRequest = function (source) {\n  this.url = this.originalUrl = source.url;\n  this.method = source.method;\n  this.httpVersion = source.httpVersion;\n  this.httpVersionMajor = source.httpVersionMajor;\n  this.httpVersionMinor = source.httpVersionMinor;\n  this.setEncoding = source.setEncoding;\n  this.connection = source.connection;\n  this.socket = source.socket;\n\n  if (source.query) {\n    this.query = source.query;\n  }\n  else {\n    this.query = ~source.url.indexOf('?')\n      ? qs.parse(url.parse(source.url).query)\n      : {};\n  }\n};\n\n// http.serverRequest methods\n['setEncoding'].forEach(function (method) {\n  RequestStream.prototype[method] = function () {\n    return this.request[method].apply(this.request, arguments);\n  };\n});\n\n","/home/travis/build/npmtest/node-npmtest-union/node_modules/union/lib/core.js":"/*\n * core.js: Core functionality for the Flatiron HTTP (with SPDY support) plugin.\n *\n * (C) 2011, Charlie Robbins & the Contributors\n * MIT LICENSE\n *\n */\n\nvar http = require('http'),\n    https = require('https'),\n    fs = require('fs'),\n    stream = require('stream'),\n    HttpStream = require('./http-stream'),\n    RoutingStream = require('./routing-stream');\n\nvar core = exports;\n\ncore.createServer = function (options) {\n  var isArray = Array.isArray(options.after),\n      credentials;\n\n  if (!options) {\n    throw new Error('options is required to create a server');\n  }\n\n  function requestHandler(req, res) {\n    var routingStream = new RoutingStream({\n      before: options.before,\n      buffer: options.buffer,\n      //\n      // Remark: without new after is a huge memory leak that\n      // pipes to every single open connection\n      //\n      after: isArray && options.after.map(function (After) {\n        return new After;\n      }),\n      request: req,\n      response: res,\n      limit: options.limit,\n      headers: options.headers\n    });\n\n    routingStream.on('error', function (err) {\n      var fn = options.onError || core.errorHandler;\n      fn(err, routingStream, routingStream.target, function () {\n        routingStream.target.emit('next');\n      });\n    });\n\n    req.pipe(routingStream);\n  }\n\n  //\n  // both https and spdy requires same params\n  //\n  if (options.https || options.spdy) {\n    if (options.https && options.spdy) {\n      throw new Error('You shouldn\\'t be using https and spdy simultaneously.');\n    }\n\n    var serverOptions,\n        credentials,\n        key = !options.spdy\n          ? 'https'\n          : 'spdy';\n\n    serverOptions = options[key];\n    if (!serverOptions.key || !serverOptions.cert) {\n      throw new Error('Both options.' + key + '.`key` and options.' + key + '.`cert` are required.');\n    }\n\n    credentials = {\n      key:  fs.readFileSync(serverOptions.key),\n      cert: fs.readFileSync(serverOptions.cert)\n    };\n\n    if (serverOptions.ca) {\n      serverOptions.ca = !Array.isArray(serverOptions.ca)\n        ? [serverOptions.ca]\n        : serverOptions.ca\n\n      credentials.ca = serverOptions.ca.map(function (ca) {\n        return fs.readFileSync(ca);\n      });\n    }\n\n    if (options.spdy) {\n      // spdy is optional so we require module here rather than on top\n      var spdy = require('spdy');\n      return spdy.createServer(credentials, requestHandler);\n    }\n\n    return https.createServer(credentials, requestHandler);\n  }\n\n  return http.createServer(requestHandler);\n};\n\ncore.errorHandler = function error(err, req, res) {\n  if (err) {\n    (this.res || res).writeHead(err.status || 500, err.headers || { \"Content-Type\": \"text/plain\" });\n    (this.res || res).end(err.message + \"\\n\");\n    return;\n  }\n\n  (this.res || res).writeHead(404, {\"Content-Type\": \"text/plain\"});\n  (this.res || res).end(\"Not Found\\n\");\n};\n"}